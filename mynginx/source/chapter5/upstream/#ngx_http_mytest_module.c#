#include <ngx_config.h>
#include <ngx_core.h>
#include <ngx_http.h>


typedef  struct
{
    ngx_http_status_t           status;
    ngx_str_t					backendServer;
} ngx_http_mytest_ctx_t;

typedef struct
{
    ngx_http_upstream_conf_t upstream;
} ngx_http_mytest_conf_t;


static char *
ngx_http_mytest(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);

static ngx_int_t ngx_http_mytest_handler(ngx_http_request_t *r);
static void* ngx_http_mytest_create_loc_conf(ngx_conf_t *cf);
static char *ngx_http_mytest_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child);

static ngx_int_t
mytest_upstream_process_header(ngx_http_request_t *r);
static ngx_int_t
mytest_process_status_line(ngx_http_request_t *r);


static ngx_str_t  ngx_http_proxy_hide_headers[] =
{
    ngx_string("Date"),
    ngx_string("Server"),
    ngx_string("X-Pad"),
    ngx_string("X-Accel-Expires"),
    ngx_string("X-Accel-Redirect"),
    ngx_string("X-Accel-Limit-Rate"),
    ngx_string("X-Accel-Buffering"),
    ngx_string("X-Accel-Charset"),
    ngx_null_string
};


static ngx_command_t  ngx_http_mytest_commands[] =
{

    {
        ngx_string("mytest"),
        NGX_HTTP_MAIN_CONF | NGX_HTTP_SRV_CONF | NGX_HTTP_LOC_CONF | NGX_HTTP_LMT_CONF | NGX_CONF_NOARGS,
        ngx_http_mytest,
        NGX_HTTP_LOC_CONF_OFFSET,
        0,
        NULL
    },

    ngx_null_command
};

static ngx_http_module_t  ngx_http_mytest_module_ctx =
{
    NULL,                              /* preconfiguration */
    NULL,                  		/* postconfiguration */

    NULL,                              /* create main configuration */
    NULL,                              /* init main configuration */

    NULL,                              /* create server configuration */
    NULL,                              /* merge server configuration */

    ngx_http_mytest_create_loc_conf,       			/* create location configuration */
    ngx_http_mytest_merge_loc_conf         			/* merge location configuration */
};

ngx_module_t  ngx_http_mytest_module =
{
    NGX_MODULE_V1,
    &ngx_http_mytest_module_ctx,           /* module context */
    ngx_http_mytest_commands,              /* module directives */
    NGX_HTTP_MODULE,                       /* module type */
    NULL,                                  /* init master */
    NULL,                                  /* init module */
    NULL,                                  /* init process */
    NULL,                                  /* init thread */
    NULL,                                  /* exit thread */
    NULL,                                  /* exit process */
    NULL,                                  /* exit master */
    NGX_MODULE_V1_PADDING
};


static void* ngx_http_mytest_create_loc_conf(ngx_conf_t *cf)
{
    ngx_http_mytest_conf_t  *mycf;

    mycf = (ngx_http_mytest_conf_t  *)ngx_pcalloc(cf->pool, sizeof(ngx_http_mytest_conf_t));
    if (mycf == NULL)
    {
        return NULL;
    }

    //ÒÔÏÂ¼òµ¥µÄÓ²±àÂëngx_http_upstream_conf_t½á¹¹ÖÐµÄ¸÷³ÉÔ±£¬ÀýÈç
//³¬Ê±Ê±¼ä¶¼ÉèÎª1·ÖÖÓ¡£ÕâÒ²ÊÇhttp·´Ïò´úÀíÄ£¿éµÄÄ¬ÈÏÖµ
    mycf->upstream.connect_timeout = 60000;
    mycf->upstream.send_timeout = 60000;
    mycf->upstream.read_timeout = 60000;
    mycf->upstream.store_access = 0600;
    //Êµ¼ÊÉÏbufferingÒÑ¾­¾ö¶¨ÁË½«ÒÔ¹Ì¶¨´óÐ¡µÄÄÚ´æ×÷Îª»º³åÇøÀ´×ª·¢ÉÏÓÎµÄ
//ÏìÓ¦°üÌå£¬Õâ¿é¹Ì¶¨»º³åÇøµÄ´óÐ¡¾ÍÊÇbuffer_size¡£Èç¹ûbufferingÎª1
//¾Í»áÊ¹ÓÃ¸ü¶àµÄÄÚ´æ»º´æÀ´²»¼°·¢ÍùÏÂÓÎµÄÏìÓ¦£¬ÀýÈç×î¶àÊ¹ÓÃbufs.num¸ö
//»º³åÇø¡¢Ã¿¸ö»º³åÇø´óÐ¡Îªbufs.size£¬ÁíÍâ»¹»áÊ¹ÓÃÁÙÊ±ÎÄ¼þ£¬ÁÙÊ±ÎÄ¼þµÄ
//×î´ó³¤¶ÈÎªmax_temp_file_size
    mycf->upstream.buffering = 0;
    mycf->upstream.bufs.num = 8;
    mycf->upstream.bufs.size = ngx_pagesize;
    mycf->upstream.buffer_size = ngx_pagesize;
    mycf->upstream.busy_buffers_size = 2 * ngx_pagesize;
    mycf->upstream.temp_file_write_size = 2 * ngx_pagesize;
    mycf->upstream.max_temp_file_size = 1024 * 1024 * 1024;

    //upstreamÄ£¿éÒªÇóhide_headers³ÉÔ±±ØÐëÒª³õÊ¼»¯£¨upstreamÔÚ½âÎö
//ÍêÉÏÓÎ·þÎñÆ÷·µ»ØµÄ°üÍ·Ê±£¬»áµ÷ÓÃ
//ngx_http_upstream_process_headers·½·¨°´ÕÕhide_headers³ÉÔ±½«
//±¾Ó¦×ª·¢¸øÏÂÓÎµÄÒ»Ð©httpÍ·²¿Òþ²Ø£©£¬ÕâÀï½«Ëü¸³Îª
//NGX_CONF_UNSET_PTR £¬ÊÇÎªÁËÔÚmergeºÏ²¢ÅäÖÃÏî·½·¨ÖÐÊ¹ÓÃ
//upstreamÄ£¿éÌá¹©µÄngx_http_upstream_hide_headers_hash
//·½·¨³õÊ¼»¯hide_headers ³ÉÔ±
    mycf->upstream.hide_headers = NGX_CONF_UNSET_PTR;
    mycf->upstream.pass_headers = NGX_CONF_UNSET_PTR;

    return mycf;
}


static char *ngx_http_mytest_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_mytest_conf_t *prev = (ngx_http_mytest_conf_t *)parent;
    ngx_http_mytest_conf_t *conf = (ngx_http_mytest_conf_t *)child;

    ngx_hash_init_t             hash;
    hash.max_size = 100;
    hash.bucket_size = 1024;
    hash.name = "proxy_headers_hash";
    if (ngx_http_upstream_hide_headers_hash(cf, &conf->upstream,
                                            &prev->upstream, ngx_http_proxy_hide_headers, &hash)
        != NGX_OK)
    {
        return NGX_CONF_ERROR;
    }

    return NGX_CONF_OK;
}


static ngx_int_t
mytest_upstream_create_request(ngx_http_request_t *r)
{
    //·¢ÍùgoogleÉÏÓÎ·þÎñÆ÷µÄÇëÇóºÜ¼òµ¥£¬¾ÍÊÇÄ£·ÂÕý³£µÄËÑË÷ÇëÇó£¬
//ÒÔ/search?q=¡­µÄURLÀ´·¢ÆðËÑË÷ÇëÇó¡£backendQueryLineÖÐµÄ%VµÈ×ª»¯
//¸ñÊ½µÄÓÃ·¨£¬Çë²Î¼û4.4½ÚÖÐµÄ±í4-7
    static ngx_str_t backendQueryLine =
        ngx_string("GET /search?q=%V HTTP/1.1\r\nHost: www.google.com\r\nConnection: close\r\n\r\n");
    ngx_int_t queryLineLen = backendQueryLine.len + r->args.len - 2;
    //±ØÐëÓÉÄÚ´æ³ØÖÐÉêÇëÄÚ´æ£¬ÕâÓÐÁ½µãºÃ´¦£ºÔÚÍøÂçÇé¿ö²»¼ÑµÄÇé¿öÏÂ£¬ÏòÉÏÓÎ
//·þÎñÆ÷·¢ËÍÇëÇóÊ±£¬¿ÉÄÜÐèÒªepoll¶à´Îµ÷¶Èsend·¢ËÍ²ÅÄÜÍê³É£¬
//ÕâÊ±±ØÐë±£Ö¤Õâ¶ÎÄÚ´æ²»»á±»ÊÍ·Å£»ÇëÇó½áÊøÊ±£¬Õâ¶ÎÄÚ´æ»á±»×Ô¶¯ÊÍ·Å£¬
//½µµÍÄÚ´æÐ¹Â©µÄ¿ÉÄÜ
    ngx_buf_t* b = ngx_create_temp_buf(r->pool, queryLineLen);
    if (b == NULL)
        return NGX_ERROR;
    //lastÒªÖ¸ÏòÇëÇóµÄÄ©Î²
    b->last = b->pos + queryLineLen;

    //×÷ÓÃÏàµ±ÓÚsnprintf£¬Ö»ÊÇËüÖ§³Ö4.4½ÚÖÐµÄ±í4-7ÁÐ³öµÄËùÓÐ×ª»»¸ñÊ½
    ngx_snprintf(b->pos, queryLineLen ,
                 (char*)backendQueryLine.data, &r->args);
    // r->upstream->request_bufsÊÇÒ»¸öngx_chain_t½á¹¹£¬Ëü°üº¬×ÅÒª
//·¢ËÍ¸øÉÏÓÎ·þÎñÆ÷µÄÇëÇó
    r->upstream->request_bufs = ngx_alloc_chain_link(r->pool);
    if (r->upstream->request_bufs == NULL)
        return NGX_ERROR;

    // request_bufsÕâÀïÖ»°üº¬1¸öngx_buf_t»º³åÇø
    r->upstream->request_bufs->buf = b;
    r->upstream->request_bufs->next = NULL;

    r->upstream->request_sent = 0;
    r->upstream->header_sent = 0;
    // header_hash²»¿ÉÒÔÎª0
    r->header_hash = 1;
    return NGX_OK;
}

static ngx_int_t
mytest_process_status_line(ngx_http_request_t *r)
{
    size_t                 len;
    ngx_int_t              rc;
    ngx_http_upstream_t   *u;

    //ÉÏÏÂÎÄÖÐ²Å»á±£´æ¶à´Î½âÎöhttpÏìÓ¦ÐÐµÄ×´Ì¬£¬Ê×ÏÈÈ¡³öÇëÇóµÄÉÏÏÂÎÄ
    ngx_http_mytest_ctx_t* ctx = ngx_http_get_module_ctx(r, ngx_http_mytest_module);
    if (ctx == NULL)
    {
        return NGX_ERROR;
    }

    u = r->upstream;

    //http¿ò¼ÜÌá¹©µÄngx_http_parse_status_line·½·¨¿ÉÒÔ½âÎöhttp
//ÏìÓ¦ÐÐ£¬ËüµÄÊäÈë¾ÍÊÇÊÕµ½µÄ×Ö·ûÁ÷ºÍÉÏÏÂÎÄÖÐµÄngx_http_status_t½á¹¹
    rc = ngx_http_parse_status_line(r, &u->buffer, &ctx->status);
    //·µ»ØNGX_AGAIN±íÊ¾»¹Ã»ÓÐ½âÎö³öÍêÕûµÄhttpÏìÓ¦ÐÐ£¬ÐèÒª½ÓÊÕ¸ü¶àµÄ
//×Ö·ûÁ÷ÔÙÀ´½âÎö
    if (rc == NGX_AGAIN)
    {
        return rc;
    }
    //·µ»ØNGX_ERRORÔòÃ»ÓÐ½ÓÊÕµ½ºÏ·¨µÄhttpÏìÓ¦ÐÐ
    if (rc == NGX_ERROR)
    {
        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                      "upstream sent no valid HTTP/1.0 header");

        r->http_version = NGX_HTTP_VERSION_9;
        u->state->status = NGX_HTTP_OK;

        return NGX_OK;
    }

    //ÒÔÏÂ±íÊ¾½âÎöµ½ÍêÕûµÄhttpÏìÓ¦ÐÐ£¬ÕâÊ±»á×öÒ»Ð©¼òµ¥µÄ¸³Öµ²Ù×÷£¬½«½âÎö³ö
//µÄÐÅÏ¢ÉèÖÃµ½r->upstream->headers_in½á¹¹ÌåÖÐ£¬upstream½âÎöÍêËù
//ÓÐµÄ°üÍ·Ê±£¬¾Í»á°Ñheaders_inÖÐµÄ³ÉÔ±ÉèÖÃµ½½«ÒªÏòÏÂÓÎ·¢ËÍµÄ
//r->headers_out½á¹¹ÌåÖÐ£¬Ò²¾ÍÊÇËµ£¬ÏÖÔÚÎÒÃÇÏòheaders_inÖÐÉèÖÃµÄ
//ÐÅÏ¢£¬×îÖÕ¶¼»á·¢ÍùÏÂÓÎ¿Í»§¶Ë¡£ÎªÊ²Ã´²»ÊÇÖ±½ÓÉèÖÃr->headers_out¶øÒª
//ÕâÑù¶à´ËÒ»¾ÙÄØ£¿ÕâÊÇÒòÎªupstreamÏ£ÍûÄÜ¹»°´ÕÕ
//ngx_http_upstream_conf_tÅäÖÃ½á¹¹ÌåÖÐµÄhide_headersµÈ³ÉÔ±¶Ô
//·¢ÍùÏÂÓÎµÄÏìÓ¦Í·²¿×öÍ³Ò»´¦Àí
    if (u->state)
    {
        u->state->status = ctx->status.code;
    }

    u->headers_in.status_n = ctx->status.code;

    len = ctx->status.end - ctx->status.start;
    u->headers_in.status_line.len = len;

    u->headers_in.status_line.data = ngx_pnalloc(r->pool, len);
    if (u->headers_in.status_line.data == NULL)
    {
        return NGX_ERROR;
    }

    ngx_memcpy(u->headers_in.status_line.data, ctx->status.start, len);

    //ÏÂÒ»²½½«¿ªÊ¼½âÎöhttpÍ·²¿£¬ÉèÖÃprocess_header»Øµ÷·½·¨Îª
//mytest_upstream_process_header£¬
//Ö®ºóÔÙÊÕµ½µÄÐÂ×Ö·ûÁ÷½«ÓÉmytest_upstream_process_header½âÎö
    u->process_header = mytest_upstream_process_header;

    //Èç¹û±¾´ÎÊÕµ½µÄ×Ö·ûÁ÷³ýÁËhttpÏìÓ¦ÐÐÍâ£¬»¹ÓÐ¶àÓàµÄ×Ö·û£¬
//½«ÓÉmytest_upstream_process_header·½·¨½âÎö
    return mytest_upstream_process_header(r);
}


static ngx_int_t
mytest_upstream_process_header(ngx_http_request_t *r)
{
    ngx_int_t                       rc;
    ngx_table_elt_t                *h;
    ngx_http_upstream_header_t     *hh;
    ngx_http_upstream_main_conf_t  *umcf;

    //ÕâÀï½«upstreamÄ£¿éÅäÖÃÏîngx_http_upstream_main_conf_tÈ¡ÁË
//³öÀ´£¬Ä¿µÄÖ»ÓÐ1¸ö£¬¶Ô½«Òª×ª·¢¸øÏÂÓÎ¿Í»§¶ËµÄhttpÏìÓ¦Í·²¿×÷Í³Ò»
//´¦Àí¡£¸Ã½á¹¹ÌåÖÐ´æ´¢ÁËÐèÒª×öÍ³Ò»´¦ÀíµÄhttpÍ·²¿Ãû³ÆºÍ»Øµ÷·½·¨
    umcf = ngx_http_get_module_main_conf(r, ngx_http_upstream_module);

    //Ñ­»·µÄ½âÎöËùÓÐµÄhttpÍ·²¿
    for ( ;; )
    {
        // http¿ò¼ÜÌá¹©ÁË»ù´¡ÐÔµÄngx_http_parse_header_line
//·½·¨£¬ËüÓÃÓÚ½âÎöhttpÍ·²¿
        rc = ngx_http_parse_header_line(r, &r->upstream->buffer, 1);
        //·µ»ØNGX_OK±íÊ¾½âÎö³öÒ»ÐÐhttpÍ·²¿
        if (rc == NGX_OK)
        {
            //Ïòheaders_in.headersÕâ¸öngx_list_tÁ´±íÖÐÌí¼ÓhttpÍ·²¿
            h = ngx_list_push(&r->upstream->headers_in.headers);
            if (h == NULL)
            {
                return NGX_ERROR;
            }
            //ÒÔÏÂ¿ªÊ¼¹¹Ôì¸Õ¸ÕÌí¼Óµ½headersÁ´±íÖÐµÄhttpÍ·²¿
            h->hash = r->header_hash;

            h->key.len = r->header_name_end - r->header_name_start;
            h->value.len = r->header_end - r->header_start;
            //±ØÐëÓÉÄÚ´æ³ØÖÐ·ÖÅä´æ·ÅhttpÍ·²¿µÄÄÚ´æ
            h->key.data = ngx_pnalloc(r->pool,
                                      h->key.len + 1 + h->value.len + 1 + h->key.len);
            if (h->key.data == NULL)
            {
                return NGX_ERROR;
            }

            h->value.data = h->key.data + h->key.len + 1;
            h->lowcase_key = h->key.data + h->key.len + 1 + h->value.len + 1;

            ngx_memcpy(h->key.data, r->header_name_start, h->key.len);
            h->key.data[h->key.len] = '\0';
            ngx_memcpy(h->value.data, r->header_start, h->value.len);
            h->value.data[h->value.len] = '\0';

            if (h->key.len == r->lowcase_index)
            {
                ngx_memcpy(h->lowcase_key, r->lowcase_header, h->key.len);
            }
            else
            {
                ngx_strlow(h->lowcase_key, h->key.data, h->key.len);
            }

            //upstreamÄ£¿é»á¶ÔÒ»Ð©httpÍ·²¿×öÌØÊâ´¦Àí
            hh = ngx_hash_find(&umcf->headers_in_hash, h->hash,
                               h->lowcase_key, h->key.len);

            if (hh && hh->handler(r, h, hh->offset) != NGX_OK)
            {
                return NGX_ERROR;
            }

            continue;
        }

        //·µ»ØNGX_HTTP_PARSE_HEADER_DONE±íÊ¾ÏìÓ¦ÖÐËùÓÐµÄhttpÍ·²¿¶¼½âÎö
//Íê±Ï£¬½ÓÏÂÀ´ÔÙ½ÓÊÕµ½µÄ¶¼½«ÊÇhttp°üÌå
        if (rc == NGX_HTTP_PARSE_HEADER_DONE)
        {
            //Èç¹ûÖ®Ç°½âÎöhttpÍ·²¿Ê±Ã»ÓÐ·¢ÏÖserverºÍdateÍ·²¿£¬ÒÔÏÂ»á
            //¸ù¾ÝhttpÐ­ÒéÌí¼ÓÕâÁ½¸öÍ·²¿
            if (r->upstream->headers_in.server == NULL)
            {
                h = ngx_list_push(&r->upstream->headers_in.headers);
                if (h == NULL)
                {
                    return NGX_ERROR;
                }

                h->hash = ngx_hash(ngx_hash(ngx_hash(ngx_hash(
                                                         ngx_hash('s', 'e'), 'r'), 'v'), 'e'), 'r');

                ngx_str_set(&h->key, "Server");
                ngx_str_null(&h->value);
                h->lowcase_key = (u_char *) "server";
            }

            if (r->upstream->headers_in.date == NULL)
            {
                h = ngx_list_push(&r->upstream->headers_in.headers);
                if (h == NULL)
                {
                    return NGX_ERROR;
                }

                h->hash = ngx_hash(ngx_hash(ngx_hash('d', 'a'), 't'), 'e');

                ngx_str_set(&h->key, "Date");
                ngx_str_null(&h->value);
                h->lowcase_key = (u_char *) "date";
            }

            return NGX_OK;
        }

        //Èç¹û·µ»ØNGX_AGAINÔò±íÊ¾×´Ì¬»ú»¹Ã»ÓÐ½âÎöµ½ÍêÕûµÄhttpÍ·²¿£¬
//ÒªÇóupstreamÄ£¿é¼ÌÐø½ÓÊÕÐÂµÄ×Ö·ûÁ÷ÔÙ½»ÓÉprocess_header
//»Øµ÷·½·¨½âÎö
        if (rc == NGX_AGAIN)
        {
            return NGX_AGAIN;
        }

        //ÆäËû·µ»ØÖµ¶¼ÊÇ·Ç·¨µÄ
        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                      "upstream sent invalid header");

        return NGX_HTTP_UPSTREAM_INVALID_HEADER;
    }
}

static void
mytest_upstream_finalize_request(ngx_http_request_t *r, ngx_int_t rc)
{
    ngx_log_error(NGX_LOG_DEBUG, r->connection->log, 0,
                  "mytest_upstream_finalize_request");
}


static char *
ngx_http_mytest(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_core_loc_conf_t  *clcf;

    //Ê×ÏÈÕÒµ½mytestÅäÖÃÏîËùÊôµÄÅäÖÃ¿é£¬clcfÃ²ËÆÊÇlocation¿éÄÚµÄÊý¾Ý
//½á¹¹£¬ÆäÊµ²»È»£¬Ëü¿ÉÒÔÊÇmain¡¢srv»òÕßloc¼¶±ðÅäÖÃÏî£¬Ò²¾ÍÊÇËµÔÚÃ¿¸ö
//http{}ºÍserver{}ÄÚÒ²¶¼ÓÐÒ»¸öngx_http_core_loc_conf_t½á¹¹Ìå
    clcf = ngx_http_conf_get_module_loc_conf(cf, ngx_http_core_module);

    //http¿ò¼ÜÔÚ´¦ÀíÓÃ»§ÇëÇó½øÐÐµ½NGX_HTTP_CONTENT_PHASE½×¶ÎÊ±£¬Èç¹û
//ÇëÇóµÄÖ÷»úÓòÃû¡¢URIÓëmytestÅäÖÃÏîËùÔÚµÄÅäÖÃ¿éÏàÆ¥Åä£¬¾Í½«µ÷ÓÃÎÒÃÇ
//ÊµÏÖµÄngx_http_mytest_handler·½·¨´¦ÀíÕâ¸öÇëÇó
    clcf->handler = ngx_http_mytest_handler;

    return NGX_CONF_OK;
}


static ngx_int_t
ngx_http_mytest_handler(ngx_http_request_t *r)
{
    //Ê×ÏÈ½¨Á¢httpÉÏÏÂÎÄ½á¹¹Ìångx_http_mytest_ctx_t
    ngx_http_mytest_ctx_t* myctx = ngx_http_get_module_ctx(r, ngx_http_mytest_module);
    if (myctx == NULL)
    {
        myctx = ngx_palloc(r->pool, sizeof(ngx_http_mytest_ctx_t));
        if (myctx == NULL)
        {
            return NGX_ERROR;
        }
        //½«ÐÂ½¨µÄÉÏÏÂÎÄÓëÇëÇó¹ØÁªÆðÀ´
        ngx_http_set_ctx(r, myctx, ngx_http_mytest_module);
    }
    //¶ÔÃ¿1¸öÒªÊ¹ÓÃupstreamµÄÇëÇó£¬±ØÐëµ÷ÓÃÇÒÖ»ÄÜµ÷ÓÃ1´Î
//ngx_http_upstream_create·½·¨£¬Ëü»á³õÊ¼»¯r->upstream³ÉÔ±
    if (ngx_http_upstream_create(r) != NGX_OK)
    {
        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0, "ngx_http_upstream_create() failed");
        return NGX_ERROR;
    }

    //µÃµ½ÅäÖÃ½á¹¹Ìångx_http_mytest_conf_t
    ngx_http_mytest_conf_t  *mycf = (ngx_http_mytest_conf_t  *) ngx_http_get_module_loc_conf(r, ngx_http_mytest_module);
    ngx_http_upstream_t *u = r->upstream;
    //ÕâÀïÓÃÅäÖÃÎÄ¼þÖÐµÄ½á¹¹ÌåÀ´¸³¸ør->upstream->conf³ÉÔ±
    u->conf = &mycf->upstream;
    //¾ö¶¨×ª·¢°üÌåÊ±Ê¹ÓÃµÄ»º³åÇø
    u->buffering = mycf->upstream.buffering;

    //ÒÔÏÂ´úÂë¿ªÊ¼³õÊ¼»¯resolved½á¹¹Ìå£¬ÓÃÀ´±£´æÉÏÓÎ·þÎñÆ÷µÄµØÖ·
    u->resolved = (ngx_http_upstream_resolved_t*) ngx_pcalloc(r->pool, sizeof(ngx_http_upstream_resolved_t));
    if (u->resolved == NULL)
    {
        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                      "ngx_pcalloc resolved error. %s.", strerror(errno));
        return NGX_ERROR;
    }

    //ÕâÀïµÄÉÏÓÎ·þÎñÆ÷¾ÍÊÇwww.google.com
    static struct sockaddr_in backendSockAddr;
    struct hostent *pHost = gethostbyname((char*) "www.google.com");
    if (pHost == NULL)
    {
        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                      "gethostbyname fail. %s", strerror(errno));

        return NGX_ERROR;
    }

    //·ÃÎÊÉÏÓÎ·þÎñÆ÷µÄ80¶Ë¿Ú
    backendSockAddr.sin_family = AF_INET;
    backendSockAddr.sin_port = htons((in_port_t) 80);
    char* pDmsIP = inet_ntoa(*(struct in_addr*) (pHost->h_addr_list[0]));
    backendSockAddr.sin_addr.s_addr = inet_addr(pDmsIP);
    myctx->backendServer.data = (u_char*)pDmsIP;
    myctx->backendServer.len = strlen(pDmsIP);

    //½«µØÖ·ÉèÖÃµ½resolved³ÉÔ±ÖÐ
    u->resolved->sockaddr = (struct sockaddr *)&backendSockAddr;
    u->resolved->socklen = sizeof(struct sockaddr_in);
    u->resolved->naddrs = 1;

    //ÉèÖÃÈý¸ö±ØÐëÊµÏÖµÄ»Øµ÷·½·¨£¬Ò²¾ÍÊÇ5.3.3½ÚÖÁ5.3.5½ÚÖÐÊµÏÖµÄ3¸ö·½·¨
    u->create_request = mytest_upstream_create_request;
    u->process_header = mytest_process_status_line;
    u->finalize_request = mytest_upstream_finalize_request;

    //ÕâÀï±ØÐë½«count³ÉÔ±¼Ó1£¬ÀíÓÉ¼û5.1.5½Ú
    r->main->count++;
    //Æô¶¯upstream
    ngx_http_upstream_init(r);
    //±ØÐë·µ»ØNGX_DONE
    return NGX_DONE;
}


